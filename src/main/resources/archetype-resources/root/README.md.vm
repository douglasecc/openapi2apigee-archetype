#set( $H = '#' )
$H API Proxy ${artifactId}

The generated project expects apigee credentials to be available as environament variables APIGEE_USERNAME and APIGEE_PASSWORD

Property <code>deployment.suffix</code> if not provided is by default <code>-${user.name}</code>, for example say your name is <code>pancho</code> and if your
proxy name is <code>oauth-v1</code> and your basepath is <code>oauth/v1</code> and you do not provide <code>deployment.suffix</code> then
your proxy will be deployed ad <code>oauth-v1-pancho</code> and basepath <code>oauth/v1-pancho</code>

$H$H$H Property externalization
In order to make our pom.xml as simple as possible and avoid populating it with lots of properties, we externalize properties to yaml files and then have
**yaml-properties-maven-plugin** load properties from such yaml files from **config** directory, let assume we have a profile named qa then here is how it works:

1. Loads global properties from file __config/global-config.yaml__
2. Loads profile specific properties from file __config/qa.yaml__, this properties will overwrite predefined property in __config/global-config.yaml__.
3. When this properties are loaded they are expanded as dot separated names and become available to the maven during execution.

Say you have a profile named qa, then you have a file qa.yaml with properties as follows
```yaml
target:
    scheme: https
    host: example.net
    port: 443
    credentials:
      username: someuser
      password: somepass
```
this properties will be expanded as:
```properties
target.scheme: https
target.host: example.net
target.port: 443
target.credentials.username: someuser
target.credentials.password: somepass
```
**_Important note_**. Be aware that this properties are also overriden by properties passed to maven cli or defined as properties in pom.xml

$H$H$H Processing of resources
To make our project more dynamic and less hardcoded this project heavily uses **maven-resources-plugin** to make replacements of properties throughout the files during **process-resources** phase,
so for example say you have a profile named qa and if you only want to generate the artifacts for your qa profile and look at them without deploying you only need to run:
```bash
mvn process-resources -Pqa  -Ddeployment.suffix=
```
Here is how it works:
1. Directories **apiproxy**, **edge** and **test** are copied to **target** directory.
2. Files are scanned for tokens in the form of _${property.name}_ and then replaced by this property value.

**Important note.** we also use forked [replacer](https://github.com/iarellano/maven-replacer-plugin) plugin which supports XPath and JSONPath expressions which can be very useful if we want be more accurate at replacing values which are not tokens directly in copied files, two samples of xpath replacements are present in pom.xml file.

#if ($mockserver == "true")
$H$H Deploy mock server
Given a mock server has been created, you can deploy it as follows (asumming there is a qa profile in mock/pom.xml, verify what profiles are available):
```bash
mvn install -Pqa -f mock/pom.xml
```
**Important note** be aware this proxy is not configured to use property <code>deployment.suffix</code>, therefore you will always get a proxy with same name and same basepath.
#end

$H$H Deploying artifacts to Apige EDGE
To deploy the API Proxy to to Apigee EDGE you only need to execute maven's <code>install</code> phase along with the profile you want to deploy.

#foreach($profile in $profiles)
Deploy API Proxy to <code>${setupMap.get($profile).get("env")}</code> environment stated by profile <code>$profile</code>
```bash
mvn install -P$profile  -Ddeployment.suffix=
```
#end

$H$H Integration and performance testing

$H$H$H Integration testing
Integration testing is leveraged by [apickli](https://github.com/apickli/apickli) which is a REST API integration testing framework based on cucumber.js.

Test cases are in directory test/integration/features and results are writen to target/results/performance/test.json.

$H$H$H$H Run integration testing
To run integration testing we need to activate profile integration-test along with the profile to test ane tell maven to run <code>verify</code> phase, this separation has been done
to get away the problem of creating an apiproduct when the api proxy does not exists yet.

#foreach($profile in $profiles)
Run integration test for profile <code>$profile</code> on environment <code>${setupMap.get($profile).get("env")}</code> in <code>${setupMap.get($profile).get("org")}</code> organization
```bash
mvn verify -P${profile},integration-test -Ddeployment.suffix=
```
#end

$H$H$H Performance testing
Performance testing is executed by [JMeter](https://jmeter.apache.org/) which is designed to load test functional behavior and measure performance.
Analogous to integration testing we need to activate profile <code>performance-test</code> along with the profile to test and tell maven to run <code>verify</code> phase.

#foreach($profile in $profiles)
Run performance test for profile <code>$profile</code> on environment <code>${setupMap.get($profile).get("env")}</code> in <code>${setupMap.get($profile).get("org")}</code> organization
```bash
mvn verify -P${profile},performance-test -Ddeployment.suffix=
```
#end

$H$H$H Nevertheless you can run both integration and performance testing in one single run.
#foreach($profile in $profiles)
Run bot integration and performance testing for profile <code>$profile</code> on environment <code>${setupMap.get($profile).get("env")}</code> in <code>${setupMap.get($profile).get("org")}</code> organization
```bash
mvn verify -P${profile},integration-test,performance-test -Ddeployment.suffix=
```
#end

**Note**. <code>test/**</code> files are also run for replacements when they are copied to <code>target</code> directory, take a look at files in those directories and take advantage of it.

Generated by [openapi2apige-archetype](https://github.com/iarellano/openapi2apigee-archetype). **ENJOY!**